// <auto-generated />
grammar Lua;

compilation_unit
  : statement_list
  ;

statement_list
  : statement*
  ;

statement
  : assignment_statement
  | break_statement
  | compound_assignment_statement
  | continue_statement
  | do_statement
  | empty_statement
  | expression_statement
  | function_declaration_statement
  | generic_for_statement
  | goto_label_statement
  | goto_statement
  | if_statement
  | local_function_declaration_statement
  | local_variable_declaration_statement
  | numeric_for_statement
  | repeat_until_statement
  | return_statement
  | type_declaration_statement
  | while_statement
  ;

assignment_statement
  : prefix_expression (',' prefix_expression)* equals_values_clause ';'?
  ;

prefix_expression
  : function_call_expression
  | method_call_expression
  | parenthesized_expression
  | variable_expression
  ;

function_call_expression
  : prefix_expression function_argument
  ;

function_argument
  : expression_list_function_argument
  | string_function_argument
  | table_constructor_function_argument
  ;

expression_list_function_argument
  : '(' (expression (',' expression)*)? ')'
  ;

string_function_argument
  : literal_expression
  ;

literal_expression
  : 'false'
  | 'nil'
  | 'true'
  | hash_string_literal_token
  | numeric_literal_token
  | string_literal_token
  ;

table_constructor_function_argument
  : table_constructor_expression
  ;

table_constructor_expression
  : '{' (table_field (',' table_field)* ','?)? '}'
  ;

table_field
  : expression_keyed_table_field
  | identifier_keyed_table_field
  | unkeyed_table_field
  ;

expression_keyed_table_field
  : '[' expression ']' '=' expression
  ;

identifier_keyed_table_field
  : identifier_token '=' expression
  ;

unkeyed_table_field
  : expression
  ;

method_call_expression
  : prefix_expression ':' identifier_token function_argument
  ;

parenthesized_expression
  : '(' expression ')'
  ;

variable_expression
  : element_access_expression
  | identifier_name
  | member_access_expression
  ;

element_access_expression
  : prefix_expression '[' expression ']'
  ;

identifier_name
  : identifier_token
  ;

member_access_expression
  : prefix_expression '.' identifier_token
  ;

equals_values_clause
  : '=' expression (',' expression)*
  ;

break_statement
  : 'break' ';'?
  ;

compound_assignment_statement
  : prefix_expression ('+=' | '-=' | '*=' | '/=' | '%=' | '..=' | '^=') expression ';'?
  ;

continue_statement
  : 'continue' ';'?
  ;

do_statement
  : 'do' statement_list 'end' ';'?
  ;

empty_statement
  : ';'?
  ;

expression_statement
  : expression ';'?
  ;

function_declaration_statement
  : 'function' function_name type_parameter_list? parameter_list type_binding? statement_list 'end' ';'?
  ;

function_name
  : member_function_name
  | method_function_name
  | simple_function_name
  ;

member_function_name
  : function_name '.' identifier_token
  ;

method_function_name
  : function_name ':' identifier_token
  ;

simple_function_name
  : identifier_token
  ;

type_parameter_list
  : '<' (type_parameter (',' type_parameter)*)? '>'
  ;

type_parameter
  : identifier_token '...'? equals_type?
  ;

equals_type
  : '=' type
  ;

type
  : function_type
  | generic_type_pack
  | intersection_type
  | literal_type
  | nilable_type
  | parenthesized_type
  | table_based_type
  | type_name
  | type_pack
  | typeof_type
  | union_type
  | variadic_type_pack
  ;

function_type
  : type_parameter_list? '(' (type (',' type)*)? ')' '->' type
  ;

generic_type_pack
  : identifier_token '...'
  ;

intersection_type
  : type '&' type
  ;

literal_type
  : 'false'
  | 'nil'
  | 'true'
  | string_literal_token
  ;

nilable_type
  : type '?'
  ;

parenthesized_type
  : '(' type ')'
  ;

table_based_type
  : array_type
  | table_type
  ;

array_type
  : '{' type '}'
  ;

table_type
  : '{' (table_type_element (',' table_type_element)*)? '}'
  ;

table_type_element
  : table_type_indexer
  | table_type_property
  ;

table_type_indexer
  : '[' type ']' ':' type
  ;

table_type_property
  : identifier_token ':' type
  ;

type_name
  : composite_type_name
  | simple_type_name
  ;

composite_type_name
  : type_name '.' identifier_token type_argument_list?
  ;

type_argument_list
  : '<' (type (',' type)*)? '>'
  ;

simple_type_name
  : identifier_token type_argument_list?
  ;

type_pack
  : '(' (type (',' type)*)? ')'
  ;

typeof_type
  : 'typeof' '(' expression ')'
  ;

union_type
  : type '|' type
  ;

variadic_type_pack
  : '...' type
  ;

parameter_list
  : '(' (parameter (',' parameter)*)? ')'
  ;

parameter
  : named_parameter
  | var_arg_parameter
  ;

named_parameter
  : identifier_token type_binding?
  ;

type_binding
  : ':' type
  ;

var_arg_parameter
  : '...' type_binding?
  ;

generic_for_statement
  : 'for' typed_identifier_name (',' typed_identifier_name)* 'in' expression (',' expression)* 'do' statement_list 'end' ';'?
  ;

typed_identifier_name
  : identifier_name type_binding?
  ;

goto_label_statement
  : '::' identifier_token '::' ';'?
  ;

goto_statement
  : 'goto' identifier_token ';'?
  ;

if_statement
  : 'if' expression 'then' statement_list else_if_clause* else_clause? 'end' ';'?
  ;

else_if_clause
  : 'elseif' expression 'then' statement_list
  ;

else_clause
  : 'else' statement_list
  ;

local_function_declaration_statement
  : 'local' 'function' identifier_name type_parameter_list? parameter_list type_binding? statement_list 'end' ';'?
  ;

local_variable_declaration_statement
  : 'local' local_declaration_name (',' local_declaration_name)* equals_values_clause? ';'?
  ;

local_declaration_name
  : identifier_name variable_attribute? type_binding?
  ;

variable_attribute
  : '<' identifier_token '>'
  ;

numeric_for_statement
  : 'for' typed_identifier_name '=' expression ',' expression (',' expression) 'do' statement_list 'end' ';'?
  ;

repeat_until_statement
  : 'repeat' statement_list 'until' expression ';'?
  ;

return_statement
  : 'return' (expression (',' expression)*)? ';'?
  ;

type_declaration_statement
  : 'export'? 'type' identifier_token type_parameter_list? '=' type ';'?
  ;

while_statement
  : 'while' expression 'do' statement_list 'end' ';'?
  ;

expression
  : anonymous_function_expression
  | binary_expression
  | if_expression
  | literal_expression
  | prefix_expression
  | table_constructor_expression
  | type_cast_expression
  | unary_expression
  | var_arg_expression
  ;

anonymous_function_expression
  : 'function' type_parameter_list? parameter_list type_binding? statement_list 'end'
  ;

binary_expression
  : expression ('&&' | '&' | 'and' | '!=' | '..' | '==' | '>=' | '>>' | '>' | '^' | '<=' | '<<' | '<' | '-' | 'or' | '%' | '||' | '|' | '+' | '/' | '*' | '~=' | '~' | '//') expression
  ;

if_expression
  : 'if' expression 'then' expression else_if_expression_clause* 'else' expression
  ;

else_if_expression_clause
  : 'elseif' expression 'then' expression
  ;

type_cast_expression
  : expression '::' type
  ;

unary_expression
  : '!' expression
  | '#' expression
  | '-' expression
  | 'not' expression
  | '~' expression
  ;

var_arg_expression
  : '...'
  ;

hash_string_literal_token
  : /* see lexical specification */
  ;

identifier_token
  : /* see lexical specification */
  ;

numeric_literal_token
  : /* see lexical specification */
  ;

skipped_tokens_trivia
  : syntax_token*
  ;

string_literal_token
  : /* see lexical specification */
  ;

structured_trivia
  : skipped_tokens_trivia
  ;

syntax_token
  : /* see lexical specification */
  ;
